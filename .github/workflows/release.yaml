on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    release:
        types: [created]

permissions:
    contents: write

jobs:
    build:
        name: Build for ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      platform: linux
                      artifact_name: cupcake
                      asset_name_prefix: cupcake-linux-amd64
                      asset_name_suffix: .elf
                    - os: windows-latest
                      platform: windows
                      artifact_name: cupcake.exe
                      asset_name_prefix: cupcake-windows-amd64
                      asset_name_suffix: .exe
                    - os: macos-latest
                      platform: macos-arm
                      artifact_name: cupcake
                      asset_name_prefix: cupcake-macos-arm64
                      asset_name_suffix:
                      target: aarch64-apple-darwin

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Extract version (Unix)
              if: matrix.platform != 'windows'
              id: extract_version_unix
              run: echo "VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '\"' -f2)" >> $GITHUB_OUTPUT

            - name: Extract version (Windows)
              if: matrix.platform == 'windows'
              id: extract_version_windows
              shell: pwsh
              run: |
                  $version = Select-String -Path Cargo.toml -Pattern 'version = ' | Select-Object -First 1 | ForEach-Object { $_.Line -replace '.*version = "([^"]+)".*','$1' }
                  echo "VERSION=$version" >> $env:GITHUB_OUTPUT

            - name: Set version output
              id: version
              run: |
                  if [ "${{ matrix.platform }}" = "windows" ]; then
                    echo "VERSION=${{ steps.extract_version_windows.outputs.VERSION }}" >> $GITHUB_OUTPUT
                  else
                    echo "VERSION=${{ steps.extract_version_unix.outputs.VERSION }}" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true
                  target: ${{ matrix.target || (matrix.platform == 'windows' && 'x86_64-pc-windows-msvc' || matrix.platform == 'macos' && 'x86_64-apple-darwin' || 'x86_64-unknown-linux-gnu') }}

            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ matrix.target || matrix.platform }}-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-${{ matrix.target || matrix.platform }}-

            - name: Build
              uses: actions-rs/cargo@v1
              with:
                  command: build
                  args: --release ${{ matrix.target && format('--target={0}', matrix.target) }}

            - name: Create binaries directory (Unix)
              if: matrix.platform != 'windows'
              run: mkdir -p binaries

            - name: Create binaries directory (Windows)
              if: matrix.platform == 'windows'
              run: |
                  if (-not (Test-Path -Path "binaries")) {
                      New-Item -Path "binaries" -ItemType Directory
                  }

            - name: Copy binary to binaries directory (Unix - x86_64)
              if: matrix.platform != 'windows' && !matrix.target
              run: cp target/release/${{ matrix.artifact_name }} binaries/${{ matrix.asset_name_prefix }}-v${{ steps.version.outputs.VERSION }}${{ matrix.asset_name_suffix || '' }}

            - name: Copy binary to binaries directory (Unix - with target)
              if: matrix.platform != 'windows' && matrix.target
              run: cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} binaries/${{ matrix.asset_name_prefix }}-v${{ steps.version.outputs.VERSION }}${{ matrix.asset_name_suffix || '' }}

            - name: Copy binary to binaries directory (Windows)
              if: matrix.platform == 'windows'
              run: copy target\release\${{ matrix.artifact_name }} binaries\${{ matrix.asset_name_prefix }}-v${{ steps.version.outputs.VERSION }}${{ matrix.asset_name_suffix || '' }}

            - name: Upload binary artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.asset_name_prefix }}-v${{ steps.version.outputs.VERSION }}${{ matrix.asset_name_suffix || '' }}
                  path: binaries/${{ matrix.asset_name_prefix }}-v${{ steps.version.outputs.VERSION }}${{ matrix.asset_name_suffix || '' }}

    collect-binaries:
        needs: build
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create binaries directory
              run: mkdir -p binaries

            - name: Remove existing binaries
              run: |
                  rm -rf binaries/* || true
                  echo "Removed previous binaries"

            - name: Download all workflow run artifacts
              uses: actions/download-artifact@v4
              with:
                  path: downloads

            - name: Move binaries to repository binaries directory
              run: |
                  for dir in downloads/*; do
                    cp "$dir"/* binaries/
                  done
                  ls -la binaries/

            - name: Extract version
              id: extract_version
              run: echo "VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)" >> $GITHUB_OUTPUT

            - name: Install GitHub CLI
              run: |
                  sudo apt install -y gh

            - name: Create GitHub Release with Binaries
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  tag="v${{ steps.extract_version.outputs.VERSION }}"
                  if gh release view "$tag" > /dev/null 2>&1; then
                    echo "Release $tag already exists. Skipping."
                  else
                    gh release create "$tag" \
                      binaries/* \
                      --title "$tag" \
                      --notes "Automated release of $tag"
                  fi
